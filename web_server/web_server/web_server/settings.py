"""
Django settings for web_server project.

Generated by 'django-admin startproject' using Django 3.2.13.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
import sys
sys.path.append(r'D:\杂物\研究生\比赛竞赛\基于知识图谱的医生推荐系统')
from pathlib import Path
from entity_extract import config
from entity_extract.predict import BertForNer
import pickle
from entity_extract.utils import trainUtils
from entity_extract import bert_ner_model
from return_answer.modules import semantic_parser
import pandas as pd
from recommend.try_minhash import recommend, path_pre, get_forest


args = config.Args().get_parser()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-o$p(7er+3)iei-fe3ptbir&d9%=yr78owitap62ifoxn_onqnr'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'knowledge_graph'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'web_server.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, "templates"), ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'web_server.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'
TIME_ZONE = 'Asia/Shanghai'
USE_I18N = True
USE_L10N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/


# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/
# STATIC_URL设置访问静态文件对应的url
STATIC_URL = '/static/'
# 设置静态文件所在的物理目录
# 例如我们在manage.py的同级目录下新建一个static的文件夹
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]


# 加载模型, 实体识别
args.bert_dir = '../../data/bert-base-chinese'
# args.bert_dir = '../data/bert-base-chinese'
model_name = 'bert_bilstm_crf'  # 使用的model类型：bert_bilstm， bert_bilstm_crf， bert_crf， bert
id2query = pickle.load(open('../../data/id2query.pkl', 'rb'))
ent2id_dict = pickle.load(open('../../data/ent2id_dict.pkl', 'rb'))
# print(id2query)
args.num_tags = len(ent2id_dict)
# print('args:', args)
# bertForNer = BertForNer(args, id2query)
BERTFORNER = BertForNer(args, id2query)
model_path = '../../entity_extract/checkpoints/{}/model.pt'.format(model_name)
model = bert_ner_model.BertNerModel(args)
MODEL, DEVICE = trainUtils.load_model_and_parallel(model, args.gpu_ids, model_path)
MODEL.eval()

# 疾病诊断
SEMANTIC = semantic_parser

# 推荐系统

DFCSV = pd.read_csv('../../recommend/gaoxueya-1.csv')
DF =pd.read_csv('../../recommend/haodaifu/doctors_gaoxueya.csv')
RECOMMEND = recommend
PATHPRE = path_pre
GETFOREST = get_forest

